// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CCID_Test_automation_.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UserAddress")]
    public partial class UserAddressFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "UserAddress.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UserAddress", "\tValidate user address insert operation in the database", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify user address created")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("Action", "ADD", null)]
        [NUnit.Framework.TestCaseAttribute("ActionDate", "2022-12-12", null)]
        [NUnit.Framework.TestCaseAttribute("CustomerId", "20", null)]
        [NUnit.Framework.TestCaseAttribute("AddressId", "30", null)]
        [NUnit.Framework.TestCaseAttribute("AddressType", "Q", null)]
        [NUnit.Framework.TestCaseAttribute("AddressLine1", "austin", null)]
        [NUnit.Framework.TestCaseAttribute("City", "austin", null)]
        [NUnit.Framework.TestCaseAttribute("StateCode", "CO", null)]
        [NUnit.Framework.TestCaseAttribute("AddressCountryCode", "TX", null)]
        [NUnit.Framework.TestCaseAttribute("AddresspostalCode", "20", null)]
        [NUnit.Framework.TestCaseAttribute("CreatedDate Time", "2022-12-25", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedBy", "System", null)]
        public virtual void VerifyUserAddressCreated(string columns, string values, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify user address created", null, @__tags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("Database connection is established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("user inserts \'ADD\' \'20\' \'30\' \'Q\' \'austin\' \'austin\' \'CO\' \'TX\' \'20\' \'System\' user a" +
                        "ddress to the table \'[dbo].[Table]\' is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("User should select inserted data from the table \'[dbo].[Table]\' where customerId " +
                        "= \'20\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Columns",
                            "Values"});
                table1.AddRow(new string[] {
                            "Action",
                            "ADD"});
                table1.AddRow(new string[] {
                            "CustomerId",
                            "20"});
                table1.AddRow(new string[] {
                            "AddressId",
                            "30"});
                table1.AddRow(new string[] {
                            "AddressType",
                            "Q"});
                table1.AddRow(new string[] {
                            "AddressLine1",
                            "austin"});
                table1.AddRow(new string[] {
                            "City",
                            "austin"});
                table1.AddRow(new string[] {
                            "StateCode",
                            "CO"});
                table1.AddRow(new string[] {
                            "AddressCountryCode",
                            "TX"});
                table1.AddRow(new string[] {
                            "AddresspostalCode",
                            "20"});
                table1.AddRow(new string[] {
                            "LastModifiedBy",
                            "System"});
#line 12
 testRunner.Then("validate the data is inserted successfully", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify data is inserted in Raw FileControlTable")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("FileName", "Account_SnapShopt_20.TXT", null)]
        [NUnit.Framework.TestCaseAttribute("podName", "System", null)]
        [NUnit.Framework.TestCaseAttribute("IsFileBeingProcessing", "True", null)]
        [NUnit.Framework.TestCaseAttribute("IsFileProcessingCompleted", "True", null)]
        public virtual void VerifyDataIsInsertedInRawFileControlTable(string columns, string values, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify data is inserted in Raw FileControlTable", null, @__tags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
 testRunner.Given("Database connection is established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
 testRunner.When("User inserts into Raw FileControlTable \'<fileName>\' \'<podName>\' \'<isFileBeingProc" +
                        "essing>\' \'<isFileProcessingCompleted>\' data to sql table \'[DBO].[CDAS_RawFileCon" +
                        "trolTable]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.Then("User should select inserted data from the table \'[DBO].[CDAS_RawFileControlTable]" +
                        "\' where FileName \'Account_SnapShopt_20.TXT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Columns",
                            "Values"});
                table2.AddRow(new string[] {
                            "FileName",
                            "Account_SnapShopt_20.TXT"});
                table2.AddRow(new string[] {
                            "podName",
                            "System"});
                table2.AddRow(new string[] {
                            "IsFileBeingProcessing",
                            "True"});
                table2.AddRow(new string[] {
                            "IsFileProcessingCompleted",
                            "True"});
#line 45
 testRunner.Then("Validate the data is inserted successfully to the table", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
